@import "../../styles/use";
@import "../Checkbox/style";

@mixin initSwitch($design) {
  @include propertiesInit($design, 'switch') {
    @include mixinCheckboxFull;

    @include mixinSwitch;
    @include mixinSwitchSwitch;
    @include mixinSwitchCircle;

    @include mixinSwitchChecked;
    @include mixinSwitchDisabled;

    @content;
  }
}

@mixin mixinSwitch() {
}

@mixin mixinSwitchSwitch() {
  @include subClass('switch') {
    @include propertiesLink('d.flex.x');
    width: v('??sys.switch.width');
    height: v('??sys.switch.height');

    @include paletteBackground(v('??l.palette'));
    @include backgroundOpacity(v('??l.switch.background-opacity'));
    border-radius: 1024px;

    transform: translateY(calc((#{v('??sys.item.size')} - #{v('??sys.switch.height')}) / 2));
    transition-property: background-color;
  }
}

@mixin mixinSwitchCircle() {
  @include subClass('item') {
    --_switch-shift: calc((#{v('??sys.switch.height')} / 2) - (#{v('??sys.switch.width')} / 2));
    transform: translateX(var(--_switch-shift));

    &::before {
      content: " ";
      @include squared(v('??sys.icon.size'));

      @include background(v('??l.icon.text'), v('??l.icon.text-opacity'));
      @include paletteGradient(v('??l.palette'));
      @include gradientOpacity(v('??l.icon.background-opacity'));
      border-radius: inherit;
      box-shadow: v('??sys.item.shadow');

      transition-property: background-color;
    }
  }
}

@mixin mixinSwitchChecked {
  input:checked ~ {
    @include subClassByGlobal('switch') {
      @include subClassByGlobal('item') {
        transform: translateX(#{calc(var(--_switch-shift) * -1)});
      }
    }
  }
}

@mixin mixinSwitchDisabled() {
  @include modClass('disabled') {
    input ~ * {
      @include linkItem('switch.background-opacity', 'disabled', true);
    }
  }
}
