@import "../../styles/properties";
@import "../../styles/color";
@import "../../styles/padding";
@import "../../styles/position";

@mixin initField(
  $design,
  $paddingLeft,
  $paddingRight
) {
  @include propertiesInit($design, 'field') {
    @include mixinField($paddingLeft, $paddingRight);
    @content;
  }
}

@mixin mixinField($paddingLeft, $paddingRight) {
  width: v('??sys.width');

  #{i('??_shift')}: 0px;
  #{i('??_half')}: calc(#{v('??sys.height')} / 2);
  #{i('??_half-text')}: calc(#{v('??sys.text.height')} / 2);
  #{i('??_left')}: calc(#{v('??sys.padding')} + #{v('??sys.space')} + #{$paddingLeft});
  #{i('??_right')}: calc(#{v('??sys.padding')} + (#{v('??sys.space')} / 2) + #{$paddingRight});
  #{i('??_opacity')}: 1;

  #{i('??_scale')}: 1;
  #{i('??_translate-x')}: #{$paddingLeft};
  #{i('??_translate-y')}: calc(#{v('??sys.height')} / 4);

  @include mixinBody;
  @include mixinInput;

  @include mixinLabel;
  @include mixinTitle;
  @include mixinText;
  @include mixinRequired;

  @include mixinScoreboard;

  @include mixinBorder;
}

@mixin mixinBody() {
  @include subClass('body') {
    @include background(v('??sys.background'), v('??sys.background-opacity'));

    display: flex;
    flex-wrap: wrap;

    position: relative;

    max-width: 100%;
  }
}

@mixin mixinInput() {
  @include subClass('input') {
    -moz-appearance: textfield;
    border-radius: inherit;

    position: relative;
    z-index: 3;

    width: 100%;
    min-height: v('??sys.height');

    @include paddingLeft(#{v('??_left')});
    @include paddingRight(#{v('??_right')});
    padding: {
      top: calc(#{v('??_half')} - #{v('??_half-text')} + #{v('??l.shift')});
      bottom: calc(#{v('??_half')} - #{v('??_half-text')} - #{v('??l.shift')});
    }

    &::placeholder {
      @include colorOpacity(v('??sys.disabled.text-opacity'));
    }

    &::-webkit-clear-button,
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button,
    &::-webkit-search-cancel-button {
      -webkit-appearance: none;
    }

    &:-webkit-autofill {
      transition: background-color 5000s ease-in-out 0s;
    }
  }

  @include subClass('hidden') {
    display: none;
  }
}

@mixin mixinLabel() {
  @include subClass('label') {
    @include colorOpacity(v('??sys.label.text-opacity'));

    border-radius: inherit;

    display: flex;
    position: absolute;
    @include top;
    z-index: 2;

    height: v('??_half');

    &::before,
    &::after {
      content: " ";

      flex-basis: v('??sys.padding');
      min-width: v('??sys.padding');
      @include mixinFieldBorderTop;
    }

    &::before {
      border-top-left-radius: inherit;
    }

    &::after {
      border-top-right-radius: inherit;
      flex-grow: 1;
    }
  }
}

@mixin mixinTitle() {
  @include subClass('title') {
    @include propertiesLink('d.flex.x');

    position: relative;
    max-width: calc(100% - #{v('??_left')} - #{v('??_right')});
    @include paddingX(v('??sys.space'));

    &::after {
      content: " ";
      position: absolute;
      @include top;
      @include mixinFieldBorderTop;
    }
  }
}

@mixin mixinText() {
  @include subClass('text') {
    line-height: 1;
    @include propertiesLink('d.font.ellipsis');
    opacity: v('??_opacity');

    max-width: 100%;

    transform: translate(#{calc(#{v('??_translate-x')} * var(--d-dir))}, #{calc(#{v('??_translate-y')} - #{v('??l.shift')})}) scale(#{v('??_scale')});
    transform-origin: var(--d-dir-text-left);
    transition-property: font-size, opacity, transform;
    transition-timing-function: v('d.sys.transition-function.standard');
  }
}

@mixin mixinRequired() {
  @include subClass('required') {
    @include color(v('??sys.required.text'));

    &::after {
      content: '*';
    }
  }
}

@mixin mixinScoreboard() {
  @include subClass('scoreboard') {
    @include colorOpacity(v('??sys.label.text-opacity'));

    @include propertiesLink('d.flex.x');
    @include paddingX(v('??sys.padding'));
    position: relative;
    z-index: 5;

    width: 100%;
    height: 0;

    transform: translateY(#{calc(-1 * #{v('??_half')})});
  }

  @include subClass('space') {
    flex-grow: 1;
  }
}

@mixin mixinBorder() {
  @include subClass('border') {
    position: absolute;
    @include inset;

    @include mixinFieldBorder;
    border-right-width: v('??sys.border.width');
    border-bottom-width: v('??sys.border.width');
    border-left-width: v('??sys.border.width');
    border-radius: inherit;
  }
}

@mixin mixinFieldBorder() {
  @include border(v('??sys.border.color'), v('??sys.border.opacity'));
}

@mixin mixinFieldBorderTop() {
  @include mixinFieldBorder;
  border-top-width: v('??sys.border.width');
}
