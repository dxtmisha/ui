@import "../../styles/properties";
@import "./styles/mixinFieldBody";
@import "./styles/mixinFieldBorder";
@import "./styles/mixinFieldDisabled";
@import "./styles/mixinFieldFocus";
@import "./styles/mixinFieldInput";
@import "./styles/mixinFieldLabel";
@import "./styles/mixinFieldScoreboard";
@import "./styles/mixinFieldValidation";

$currentStatus: (
        'palette',
        'background',
        'background-opacity',
        'border',
        'border-opacity',
        'border-width',
        'gradient',
        'gradient-opacity',
        'shadow',
        'shift',
        'text',
        'text-opacity',
        'placeholder.text',
        'placeholder.text-opacity',
        'label.font-size',
        'label.opacity',
        'label.scale',
        'label.shift',
        'label.text',
        'label.text-opacity',
        'prefix.opacity',
        'prefix.text',
        'prefix.text-opacity'
);

@mixin initField(
  $design,
  $left,
  $right,
  $prefix,
  $suffix
) {
  @include propertiesInit($design, 'field') {
    @include mixinField(
                    $left,
                    $right,
                    $prefix,
                    $suffix
    );

    @include mixinFieldBody;

    @include mixinFieldInput;

    @include mixinFieldLabel;
    @include mixinFieldTitle;
    @include mixinFieldText;
    @include mixinFieldRequired;

    @include mixinFieldScoreboard;
    @include mixinFieldPrefix;
    @include mixinFieldCancel;

    @include mixinFieldBorder;

    @include mixinFieldValidation;
    @include mixinFieldDisabled;
    @include mixinFieldFocus;

    @content;
  }
}

@mixin mixinField(
  $left,
  $right,
  $prefix,
  $suffix
) {
  #{i('??_value-left')}: #{$left};
  #{i('??_value-right')}: #{$right};
  #{i('??_value-prefix')}: #{$prefix};
  #{i('??_value-suffix')}: #{$suffix};

  #{i('??_half')}: calc(#{v('??sys.height')} / 2);
  #{i('??_label-half')}: calc(#{v('??sys.label.height')} / 2);

  #{i('??_left')}: calc(#{v('??sys.padding')} + #{v('??sys.space')} + #{$left});
  #{i('??_right')}: calc(#{v('??sys.padding')} + #{v('??sys.space')} + #{$right});

  #{i('??_label-translate-x')}: v('??_value-left');
  #{i('??_label-translate-y')}: calc(v('??sys.height') / 4);

  #{i('?field-message-padding')}: calc(v('??sys.padding') + v('??sys.space'));
  #{i('?ripple-background')}: v('??l.background');

  width: v('??sys.width');

  @include color(v('??l.text'), v('??l.text-opacity'));

  @include mixinFieldAlign;

  &:not(#{c('??-disabled')}, #{c('??-readonly')}) {
    @include mixinFieldSelected;
  }
}


@mixin mixinFieldAlign() {
  @include modClass('align') {
    @include modClass('center') {
      @include subClassByGlobal('input') {
        @include textAlign('center');
      }

      &.is-arrow {
        @include linkTo('label.translate-x', '0px');
        @include subClassByGlobal('label') {
          &::before {
            flex-grow: 1;
          }
        }
      }
    }

    @include modClass('left') {
      @include subClassByGlobal('input') {
        @include textAlign('left');
      }
    }

    @include modClass('right') {
      @include subClassByGlobal('input') {
        @include textAlign('right');
      }

      &.is-arrow {
        @include subClassByGlobal('input') {
          @include textAlign('left');
        }
      }
    }
  }
}

@mixin mixinFieldSelected() {
  @include modClassByGlobal('selected') {
    @include linkTo('background', '??sys.selected.background');
    @include linkTo('border', '??sys.selected.border');
    @include linkTo('gradient', '??sys.selected.gradient');
    @include linkTo('text', '??sys.selected.text');

    @include subClassByGlobal('body') {
      @include paletteColor(v('??l.text'));
      @include paletteBackground(v('??l.background'));
      @include paletteGradient(v('??l.gradient'));
    }

    @include subClassByGlobal('border') {
      @include paletteBorder(v('??l.border'));
    }

    @include subClassByGlobal('label') {
      &::before,
      &::after {
        @include paletteBorder(v('??l.border'));
      }
    }

    @include subClassByGlobal('title') {
      &::after {
        @include paletteBorder(v('??l.border'));
      }
    }
  }
}
