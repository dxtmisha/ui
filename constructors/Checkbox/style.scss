@import "../../styles/properties";

@mixin initCheckbox($design) {
  @include propertiesInit($design, 'checkbox') {
    @include mixinCheckbox;
    @content;
  }
}

@mixin mixinCheckbox() {
  @include color(v('??l.text'), v('??l.text-opacity'));

  display: inline-flex;
  align-items: flex-start;

  @include mixinInput;
  @include mixinText;
  @include mixinRequired;

  @include mixinItem;
  @include mixinIcon;

  @include mixinRight;

  input:checked ~ * {
    @include linkTo('palette', '??sys.checked.palette');
  }

  &.is-error,
  &.is-error input:checked ~ * {
    @include linkTo('palette', '??sys.error.palette');
    @include linkTo('text', '??sys.error.text');
  }

  @include mixinDisabled;
}

@mixin mixinInput() {
  @include subClass('input') {
    position: absolute;
    visibility: hidden;
  }
}

@mixin mixinText() {
  @include subClass('text') {
    @include marginLeft(v('??sys.gap'));
    padding-top: calc((#{v('??sys.item.size')} - #{v('??sys.label.line-height')}) / 2);

    > * {
      display: block;
    }
  }
}

@mixin mixinRequired() {
  @include subClass('required') {
    @include color(v('??sys.label.required'));

    &::after {
      content: '*';
    }
  }
}

@mixin mixinItem() {
  @include subClass('item') {
    @include mixinItemSelect;

    transition-duration: v('d.sys.transitionDuration.fade.through');
    transition-property: background-color, transform;
  }

  input:active ~ {
    * {
      @include mixinItemBackground;
    }

    @include subClassByGlobal('item') {
      @include mixinItemActive;
    }
  }
}

@mixin mixinItemActive() {
  &::after {
    transition-duration: v('d.sys.transitionDuration.sm');
  }
}

@mixin mixinItemBackground() {
  @include linkTo('item.background-opacity', '??sys.active.item.background-opacity');
  @include linkTo('item.border-opacity', '??sys.active.item.border-opacity');
}

@mixin mixinItemSelect() {
  @include propertiesLink('d.flex.center');
  position: relative;

  @include paletteBackground(v('??l.palette'));
  @include backgroundOpacity(v('??l.item.background-opacity'));

  @include circle(v('??sys.item.size'));
  min-width: v('??sys.item.size');

  &::after {
    content: " ";
    position: absolute;
    @include inset();

    @include paletteBorder(v('??l.palette'));
    @include borderOpacity(v('??l.item.border-opacity'));
    border-style: solid;
    border-width: v('??sys.item.border-width');
    border-radius: inherit;
    transition-property: border-color;
  }

  &:hover {
    @include linkTo('item.background-opacity', '??sys.hover.item.background-opacity');
    @include linkTo('item.border-opacity', '??sys.hover.item.border-opacity');
  }
}

@mixin mixinIcon() {
  @include subClass('icon') {
    @include color(v('??l.icon.text'), v('??l.icon.text-opacity'));
    @include paletteBackground(v('??l.palette'));
    @include backgroundOpacity(v('??l.icon.background-opacity'));

    position: relative;
    @include squared(v('??sys.icon.size'));

    @include paletteBorder(v('??l.palette'));
    @include borderOpacity(v('??l.icon.border-opacity'));
    border-width: v('??sys.icon.border-width');
    border-radius: v('??sys.icon.rounded');

    transition-property: background-color, border-color;

    > * {
      clip-path: inset(0 100% 0 0);
    }
  }

  input:checked + {
    * {
      @include linkTo('icon.background-opacity', '??sys.checked.icon.background-opacity');
      @include linkTo('icon.border-opacity', '??sys.checked.icon.border-opacity');
      @include linkTo('icon.text', '??sys.checked.icon.text');
      @include linkTo('icon.text-opacity', '??sys.checked.icon.text-opacity');
    }

    @include subClassByGlobal('item') {
      @include subClassByGlobal('icon') {
        > * {
          clip-path: inset(0 0 0 0);
          transition-property: clip-path, opacity, transform;
        }
      }
    }
  }
}

@mixin mixinDisabled() {
  @include modClass('disabled') {
    @include linkTo('palette', '??sys.disabled.palette');
    @include linkTo('text-opacity', '??sys.disabled.text-opacity');
    @include linkTo('icon.border-opacity', '??sys.disabled.icon.border-opacity');

    input:active +,
    input:hover + {
      * {
        @include linkTo('item.background-opacity', '??sys.disabled.item.background-opacity');
        @include linkTo('item.border-opacity', '??sys.disabled.item.border-opacity');
      }
    }

    input:checked ~ * {
      @include linkTo('palette', '??sys.disabled.palette');
      @include linkTo('icon.background-opacity', '??sys.disabled.checked.icon.background-opacity');
      @include linkTo('icon.border-opacity', '??sys.disabled.checked.icon.border-opacity');
    }
  }
}

@mixin mixinRight() {
  @include modClass('right') {
    & > * {
      order: 2;
    }

    @include subClassByGlobal('text') {
      @include marginLeft(0px);
      @include marginRight(v('??sys.gap'));
      order: 1;
    }
  }
}
