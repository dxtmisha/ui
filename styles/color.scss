@use "sass:meta";

@import "rules";

@function toColorRBG($color) {
  @if (meta.type-of($color) == color) {
    @return red($color) + ', ' + green($color) + ', ' + blue($color);
  } @else if ($color == 'transparent') {
    @return '255, 255, 255';
  } @else {
    @return $color;
  }
}

@function toGradient($color) {
  @return linear-gradient(0deg, #{$color}, #{$color});
}

@function getColor(
  $color,
  $opacity: 1,
  $gradient: false
) {
  $value: $color;

  @if (meta.type-of($color) == color) {
    $value: rgba(#{toColorRBG($color)}, #{$opacity});
  }

  @if $gradient {
    @return toGradient($value);
  } @else {
    @return $value;
  }
}

@function getOpacity($color, $opacity) {
  @if ($color == 'transparent') {
    @return '0';
  } @else {
    @return $opacity
  }
}

@mixin mixinChart($color) {
  --sys-_chart: var(--sys-chart, #{toColorRBG($color)});
}

@mixin mixinChartColor($color) {
  @include mixinChart($color);
  @include mixinColor(#{var(--sys-_chart)});
}

@mixin mixinChartBackground($color) {
  @include mixinChart($color);
  @include mixinBackground(#{var(--sys-_chart)});
}

@mixin mixinColor($color, $opacity: null) {
  --sys-color: #{toColorRBG($color)};
  @include mixinColorOpacity(getOpacity($color, $opacity));
}

@mixin mixinColorOpacity($opacity) {
  @if ($opacity != null) {
    --sys-color-opacity: #{$opacity};
  }

  @include initColor;
}

@mixin initColor() {
  color: rgba(var(--sys-color), var(--sys-color-opacity));
}

@mixin mixinStroke($color, $opacity: null) {
  --sys-color: #{toColorRBG($color)};
  @include mixinStrokeOpacity(getOpacity($color, $opacity));
}

@mixin mixinStrokeOpacity($opacity) {
  @if ($opacity != null) {
    --sys-color-opacity: #{$opacity};
  }

  @include initStroke;
}

@mixin initStroke() {
  stroke: rgba(var(--sys-color), var(--sys-color-opacity));
}

@mixin mixinBackground($color, $opacity: null) {
  --sys-background: #{toColorRBG($color)};
  @include mixinBackgroundOpacity(getOpacity($color, $opacity));
}

@mixin mixinBackgroundOpacity($opacity) {
  @if ($opacity != null) {
    --sys-background-opacity: #{$opacity};
  }

  @include initBackground;
}

@mixin mixinBackgroundAsColor() {
  @include initColor;
}

@mixin initBackground() {
  background-color: rgba(var(--sys-background), var(--sys-background-opacity));
}

@mixin initBackgroundGradient() {
  background-image: #{toGradient(#{rgba(var(--sys-background), var(--sys-background-opacity))})};
}

@mixin mixinFill($color, $opacity: null) {
  --sys-background: #{toColorRBG($color)};
  @include mixinFillOpacity(getOpacity($color, $opacity));
}

@mixin mixinFillOpacity($opacity) {
  @if ($opacity != null) {
    --sys-background-opacity: #{$opacity};
  }

  @include initFill;
}

@mixin initFill() {
  fill: rgba(var(--sys-background), var(--sys-background-opacity));
}
