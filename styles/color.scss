@use "sass:meta";

@function isColorRbgOrVar($color) {
  @return meta.type-of($color) == color or (
    $color != 'none' and
    $color != 'transparent' and
    $color != 'initial' and
    $color != 'inherit'
  )
}

@function toColorRbg($color) {
  @if (meta.type-of($color) == color) {
    @return red($color) + ', ' + green($color) + ', ' + blue($color);
  } @else {
    @return $color;
  }
}

@function toGradient($color) {
  @return linear-gradient(0deg, #{$color}, #{$color});
}

@function getColor(
  $color,
  $opacity: 1,
  $gradient: false
) {
  $value: $color;

  @if (meta.type-of($color) == color) {
    $value: rgba(#{toColorRbg($color)}, #{$opacity});
  }

  @if $gradient {
    @return toGradient($value);
  } @else {
    @return $value;
  }
}

@function getPalette($color) {
  @return #{var(--sys-palette, #{toColorRbg($color)})}
}

/* Palette */

@mixin mixinPalette($color) {
  --sys-palette: #{toColorRbg($color)};
}

@mixin mixinPaletteColor($color) {
  --sys-_palette-color: #{getPalette($color)};
  @include mixinColor(#{var(--sys-_palette-color)});
}

@mixin mixinPaletteStroke($color) {
  --sys-_palette-color: #{getPalette($color)};
  @include mixinStroke(#{var(--sys-_palette-color)});
}

@mixin mixinPaletteBackground($color) {
  --sys-_palette-background: #{getPalette($color)};
  @include mixinBackground(#{var(--sys-_palette-background)});
}

@mixin mixinPaletteFill($color) {
  --sys-_palette-background: #{getPalette($color)};
  @include mixinFill(#{var(--sys-_palette-background)});
}

@mixin mixinPaletteGradient($color) {
  --sys-_palette-gradient: #{getPalette($color)};
  @include mixinGradient(#{var(--sys-_palette-gradient)});
}

@mixin mixinPaletteBorder($color) {
  --sys-_palette-border: #{getPalette($color)};
  @include mixinBorder(#{var(--sys-_palette-border)});
}

/* Color */

@mixin mixinColor($color, $opacity: null) {
  @if (isColorRbgOrVar($color)) {
    --sys-color: #{toColorRbg($color)};
    @include mixinColorOpacity($opacity);
    @include mixinColorInit;
  } @else {
    color: $color;
  }
}

@mixin mixinColorOpacity($opacity) {
  @if ($opacity != null) {
    --sys-color-opacity: #{$opacity};
    @include mixinColorInit;
  }
}

@mixin mixinColorInit() {
  color: rgba(var(--sys-color), var(--sys-color-opacity));
}

/* Stroke */

@mixin mixinStroke($color, $opacity: null) {
  @if (isColorRbgOrVar($color)) {
    --sys-color: #{toColorRbg($color)};
    @include mixinStrokeOpacity($opacity);
    @include mixinStrokeInit;
  } @else {
    stroke: $color;
  }
}

@mixin mixinStrokeOpacity($opacity) {
  @if ($opacity != null) {
    --sys-color-opacity: #{$opacity};
    @include mixinStrokeInit;
  }
}

@mixin mixinStrokeInit() {
  stroke: rgba(var(--sys-color), var(--sys-color-opacity));
}

/* Background */

@mixin mixinBackground($color, $opacity: null) {
  @if (isColorRbgOrVar($color)) {
    --sys-background: #{toColorRbg($color)};
    @include mixinBackgroundOpacity($opacity);
    @include mixinBackgroundInit;
  } @else {
    background-color: $color;
  }
}

@mixin mixinBackgroundOpacity($opacity) {
  @if ($opacity != null) {
    --sys-background-opacity: #{$opacity};
    @include mixinBackgroundInit;
  }
}

@mixin mixinBackgroundInit() {
  background-color: rgba(var(--sys-background), var(--sys-background-opacity));
}

/* Fill */

@mixin mixinFill($color, $opacity: null) {
  @if (isColorRbgOrVar($color)) {
    --sys-background: #{toColorRbg($color)};
    @include mixinFillOpacity($opacity);
    @include mixinFillInit;
  } @else {
    fill: $color;
  }
}

@mixin mixinFillOpacity($opacity) {
  @if ($opacity != null) {
    --sys-background-opacity: #{$opacity};
    @include mixinFillInit;
  }
}

@mixin mixinFillInit() {
  fill: rgba(var(--sys-background), var(--sys-background-opacity));
}

/* Gradient */

@mixin mixinGradient($color, $opacity: null) {
  @if (isColorRbgOrVar($color)) {
    --sys-gradient: #{toColorRbg($color)};
    @include mixinGradientOpacity($opacity);
    @include mixinGradientInit;
  } @else {
    background-image: $color;
  }
}

@mixin mixinGradientOpacity($opacity) {
  @if ($opacity != null) {
    --sys-gradient-opacity: #{$opacity};
    @include mixinGradientInit;
  }
}

@mixin mixinGradientInit() {
  background-image: #{toGradient(#{rgba(var(--sys-gradient), var(--sys-gradient-opacity))})};
}

/* Border */

@mixin mixinBorder($color, $opacity: null) {
  @if (isColorRbgOrVar($color)) {
    --sys-border: #{toColorRbg($color)};
    @include mixinBorderOpacity($opacity);
    @include mixinBorderInit;
  } @else {
    border-color: $color;
  }
}

@mixin mixinBorderOpacity($opacity) {
  @if ($opacity != null) {
    --sys-border-opacity: #{$opacity};
    @include mixinBorderInit;
  }
}

@mixin mixinBorderInit() {
  border-color: rgba(var(--sys-border), var(--sys-border-opacity));
}
