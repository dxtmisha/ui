@use "sass:meta";

@import "../rules";
@import "./propertyService";
@import "./propertyValueService";
@import "./propertiesService";

$designsProperties: () !default;

@mixin mixinInit(
  $class,
  $properties,
  $init: ()
) {
  @if (isInitByType($init, 'var')) {
    @include mixinVar($class, $properties, (), $init);
  }

  @if (isInitByType($init, 'animate')) {
    @include mixinAnimateList($class, $properties, (), $init);
  }

  @if (isInitByType($init, 'property')) {
    @include mixinProperties($class, $properties, (), $init);
  }

  @if (isInitByType($init, 'virtual')) {
    @include mixinVirtualList($class, $properties, (), $init) using($index, $property) {
      @content('virtual', $index, $property);
    }
  }

  @if (isInitByType($init, 'section')) {
    @include mixinSections($class, $properties, (), $init) using($index, $value) {
      @content('section', $index, $value);
    }
  }

  @if (isInitByType($init, 'subclass')) {
    @include mixinSubclassList($class, $properties, (), $init) using($index, $value) {
      @content('subclass', $index, $value);
    }
  }

  @if (isInitByType($init, 'selector')) {
    @include mixinSelectorList($class, $properties, (), $init) using($index, $value) {
      @content('selector', $index, $value);
    }
  }

  @if (isInitByType($init, 'media')) {
    @include mixinMediaList($class, $properties, (), $init) using($index, $value) {
      @content('media', $index, $value);
    }
  }
}

@mixin mixinAnimate(
  $class,
  $index,
  $properties,
  $init: ()
) {
  $value: getValue($properties);

  @keyframes #{$class}--#{$index} {
    @each $frame, $property in $value {
      #{$frame} {
        @include mixinInit($class, $property, $init);
      }
    }
  }
}

@mixin mixinAnimateList(
  $class,
  $properties,
  $keys: (),
  $init: ()
) {
  @include mixinPropertiesByType('animate', $properties, $keys) using($index, $property) {
    @include mixinAnimate($class, $index, $property, $init);
  }
}

@mixin mixinMedia(
  $class,
  $index,
  $properties,
  $init: ()
) {
  $value: getValue($properties);
  $options: getOptions($properties);

  @media screen and (min-width: #{$options}) {
    @content($index, $value);
    @include mixinInit($class, $value, $init);
  }
}

@mixin mixinMediaList(
  $class,
  $properties,
  $keys: (),
  $init: ()
) {
  @include mixinPropertiesByType('media', $properties, $keys) using($index, $property) {
    @include mixinMedia($class, $index, $property, $init) using($index, $value) {
      @content($index, $value);
    }
  }
}

@mixin mixinProperties(
  $class,
  $properties,
  $keys: (),
  $init: ()
) {
  @include mixinPropertiesByType('property', $properties, $keys) using($index, $property) {
    @include mixinProperty($class, $index, $property, $init);
  }
}

@mixin mixinProperty(
  $class,
  $index,
  $properties,
  $init: ()
) {
  $property: getValue($properties);

  @if (
          meta.type-of($property) != map and
          meta.type-of($property) != list
  ) {
    @include mixinPropertyValue($index, $property);
  } @else {
    #{$index}: var(--#{$class}--#{$index});
    @include mixinSection($class, $index, $properties, $init);
  }
}

@mixin mixinSection(
  $class,
  $index,
  $properties,
  $init: ()
) {
  $value: getValue($properties);
  $options: getOptions($properties);

  @if ($value) {
    @if ($options) {
      &.#{$options} {
        @content($index, $value);
        @include mixinInit($class, $value, $init);
      }
    } @else {
      &--#{$index} {
        @content($index, $value);
        @include mixinInit($class, $value, $init);
      }
    }
  }
}

@mixin mixinSections(
  $class,
  $properties,
  $keys: (),
  $init: ()
) {
  @include mixinPropertiesByType('section', $properties, $keys) using($index, $property) {
    @include mixinSection($class, $index, $property, $init) using($index, $value) {
      @content($index, $value);
    }
  }
}

@mixin mixinSelector(
  $class,
  $index,
  $properties,
  $init: ()
) {
  $value: getValue($properties);
  $this: &;

  &:#{$index} {
    @content($index, $value);
    @if (isInitByType($init, 'property')) {
      @include mixinInit($class, $value, ('property'));
    }

    @if (isInitByType($init, 'subclass')) {
      #{$this} {
        @include mixinSubclassList($class, $value, (), $init);
      }
    }
  }
}

@mixin mixinSelectorList(
  $class,
  $properties,
  $keys: (),
  $init: ()
) {
  @include mixinPropertiesByType('selector', $properties, $keys) using($index, $property) {
    @include mixinSelector($class, $index, $property, $init) using($index, $value) {
      @content($index, $value);
    }
  }
}

@mixin mixinSubclass(
  $class,
  $index,
  $properties,
  $init: ()
) {
  $value: getValue($properties);

  &__#{$index} {
    @content($index, $value);
    @include mixinInit($class, $value, $init);
  }
}

@mixin mixinSubclassList(
  $class,
  $properties,
  $keys: (),
  $init: ()
) {
  @include mixinPropertiesByType('subclass', $properties, $keys) using($index, $value) {
    @include mixinSubclass($class, $index, $value, $init) using($index, $value) {
      @content($index, $value);
    }
  }
}

@mixin mixinVar(
  $class,
  $properties,
  $keys: (),
  $init: ()
) {
  @include mixinPropertiesByType('var', $properties, $keys) using($index, $property) {
    @include mixinPropertiesItem($property, #{$class}-#{$index});
  }
}

@mixin mixinVirtual(
  $class,
  $index,
  $properties,
  $init: ()
) {
  $value: getValue($properties);

  &::#{$index} {
    @if (
            $index == 'after' or
            $index == 'before'
    ) {
      content: ' ';
    }

    @content($index, $value);
    @include mixinInit($class, $value, $init);
  }
}

@mixin mixinVirtualList(
  $class,
  $properties,
  $keys: (),
  $init: ()
) {
  @include mixinPropertiesByType('virtual', $properties, $keys) using($index, $property) {
    @include mixinVirtual($class, $index, $property, $init) using($index, $value) {
      @content($index, $value);
    }
  }
}

@mixin classInitService(
  $design,
  $keys,
  $init: ()
) {
  $map: getMapItem($designsProperties, $design);
  $properties: getMapItem($map, $keys);
  $class: #{$design}-#{getListSlash($keys)};

  @if ($properties) {
    #{'.'}#{$class} {
      // @include mixinInit($class, $properties, $init);
      @content($class, $properties);
    }
  }
}

@mixin classesInitService(
  $design,
  $classes,
  $init: ()
) {
  @each $keys in $classes {
    @include classInitService($design, $keys, $init);
  }
}
