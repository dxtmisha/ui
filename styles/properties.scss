@use "sass:meta";
@use "sass:string";

@import "./services/classesService";
@import "./rules";

$currentDesign: '--' !default;
$currentClass: '--' !default;
$currentComponent: '--' !default;
$currentProperties: () !default;
$designsProperties: () !default;

@function getVar($name) {
  $index: getVarName($name);
  @return #{var(--#{strReplace($index, '.', '-')})}
}

@function getVarName($name, $separator: '.') {
  @if (string.index($name, '??') == 1) {
    @return #{$currentDesign}#{$separator}#{strReplace($currentComponent, '.', $separator)}#{$separator}#{string.slice($name, 3)}
  } @else if (string.index($name, '?') == 1) {
    @return #{$currentDesign}#{$separator}#{string.slice($name, 2)}
  } @else {
    @return $name
  }
}

@function findProperties($name) {
  $index: strToList(getVarName($name));
  $data: $designsProperties;

  @each $key in $index {
    @if ($data != null) {
      $data: getMapItem(getValue($data), $key);
    }
  }

  @return $data;
}

@mixin propertiesInit(
  $design,
  $keys,
  $init: ()
) {
  @include classInitService($design, 'button') using($class, $component, $properties) {
    $currentDesign: $design !global;
    $currentClass: $class !global;
    $currentComponent: $component !global;
    $currentProperties: $properties !global;

    @content($class, $component, $properties);
  }
}

@mixin propertiesLink($name) {
  @include mixinInit($currentClass, findProperties($name));
}

