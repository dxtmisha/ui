@use "sass:meta";
@use "sass:string";

@import "./services/classesService";
@import "./rules";

$currentDesign: '--' !default;
$currentClass: '--' !default;
$currentComponent: '--' !default;
$currentProperties: () !default;
$designsProperties: () !default;

@function c($name) {
  @return #{'.'}#{getCode($name)};
}

@function i($name) {
  @return --#{getCode($name)};
}

@function v($name) {
  @return #{var(#{i($name)})}
}

@function getName($name) {
  @if (string.index($name, '??') == 1) {
    @return #{$currentDesign}#{'.'}#{$currentComponent}#{'.'}#{string.slice($name, 3)};
  } @else if (string.index($name, '?') == 1) {
    @return #{$currentDesign}#{'.'}#{string.slice($name, 2)};
  } @else {
    @return $name;
  }
}

@function getCode($name) {
  @return strReplace(getName($name), '.', '-');
}

@function findProperties($name) {
  $index: strToList(getName($name));
  $data: $designsProperties;

  @each $key in $index {
    @if ($data != null) {
      $data: getMapItem(getValue($data), $key);
    }
  }

  @return $data;
}

@mixin propertyCustom($name, $value) {
  #{i($name)}: $value;
}

@mixin propertyCustomTo($name, $value) {
  @include propertyCustom($name, v($value));
}

@mixin link($name, $value) {
  @include propertyCustom(#{'??.l.'}#{$name}, $value)
}

@mixin linkTo($name, $value) {
  @include link($name, v($value))
}

@mixin sys($name, $value) {
  @include propertyCustom(#{'??.sys.'}#{$name}, $value)
}

@mixin sysTo($name, $value) {
  @include sys($name, v($value))
}

@mixin propertiesInit(
  $design,
  $keys,
  $init: ()
) {
  @include classInitService($design, $keys) using($class, $component, $properties) {
    $currentDesign: $design !global;
    $currentClass: $class !global;
    $currentComponent: $component !global;
    $currentProperties: $properties !global;

    @content;
  }
}

@mixin propertiesLink($name) {
  @include mixinInit($currentClass, findProperties($name));
}

@mixin modClass($name) {
  @if (meta.type-of($name) == list) {
    @each $key in $name {
      &--#{$key} {
        @content;
      }
    }
  } @else {
    &--#{$name} {
      @content;
    }
  }
}

@mixin modClassByGlobal($name) {
  &#{'.'}#{$currentDesign}#{'-'}#{$currentComponent} {
    @include modClass($name) {
      @content;
    }
  }
}

@mixin subClass($name) {
  @if (meta.type-of($name) == list) {
    @each $key in $name {
      &__#{$key} {
        @content;
      }
    }
  } @else {
    &__#{$name} {
      @content;
    }
  }
}

@mixin subClassByGlobal($name) {
  & #{'.'}#{$currentDesign}#{'-'}#{$currentComponent} {
    @include subClass($name) {
      @content;
    }
  }
}
