@use "sass:meta";
@use "sass:string";

@import "./services/classesService";

@import "./rules";
@import "./color";
@import "./dimension";
@import "./flex";
@import "./font";
@import "./margin";
@import "./padding";
@import "./position";

$currentDesign: '--' !default;
$currentClass: '--' !default;
$currentComponent: '--' !default;
$currentProperties: () !default;
$designsProperties: () !default;

@function c($name) {
  @return #{'.'}#{getCode($name)};
}

@function s($name) {
  @return #{'.'}#{$currentDesign}#{'-'}#{$currentComponent}#{'__'}#{$name};
}

@function i($name) {
  @return --#{getCode($name)};
}

@function v($name, $default: null) {
  @if ($default) {
    @return #{var(#{i($name)}, #{$default})}
  } @else {
    @return #{var(#{i($name)})}
  }
}

@function getName($name) {
  @if (string.index($name, '??') == 1) {
    @return #{$currentDesign}#{'.'}#{$currentComponent}#{'.'}#{string.slice($name, 3)};
  } @else if (string.index($name, '?') == 1) {
    @return #{$currentDesign}#{'.'}#{string.slice($name, 2)};
  } @else {
    @return $name;
  }
}

@function getCode($name) {
  @return strReplace(getName($name), '.', '-');
}

@function findProperties($name) {
  $index: strToList(getName($name));
  $data: $designsProperties;

  @each $key in $index {
    @if ($data != null) {
      $data: getMapItem(getValue($data), $key);
    }
  }

  @return $data;
}

@function getPropertiesDefault($name, $default: null) {
  $data: v(#{'??sys.'}#{$name});

  @if ($default) {
    @if (meta.type-of($default) == list) {
      @each $code in $default {
        $data: v(#{'??sys.'}#{$code}#{'.'}#{$name}, $data);
      }
    } @else {
      $data: v(#{'??sys.'}#{$default}#{'.'}#{$name}, $data);
    }
  }

  @return $data;
}

@mixin propertyCustom(
  $name,
  $value,
  $important: false
) {
  @if ($important) {
    #{i($name)}: $value !important;
  } @else {
    #{i($name)}: $value;
  }
}

@mixin propertyCustomTo(
  $name,
  $value,
  $default: null,
  $important: false
) {
  @include propertyCustom($name, v($value, $default), $important);
}

@mixin link(
  $name,
  $value,
  $important: false
) {
  @include propertyCustom(#{'??l.'}#{$name}, $value, $important)
}

@mixin linkTo(
  $name,
  $value,
  $default: null,
  $important: false
) {
  @include link($name, v($value, $default), $important)
}

@mixin sys(
  $name,
  $value,
  $important: false
) {
  @include propertyCustom(#{'??sys.'}#{$name}, $value, $important)
}

@mixin sysTo(
  $name,
  $value,
  $default: null,
  $important: false
) {
  @include sys($name, v($value, $default), $important)
}

@mixin propertiesInit(
  $design,
  $keys,
  $init: ()
) {
  @include classInitService($design, $keys) using($class, $component, $properties) {
    $currentDesign: $design !global;
    $currentClass: $class !global;
    $currentComponent: $component !global;
    $currentProperties: $properties !global;

    @content;
  }
}

@mixin propertiesLink($name) {
  @include mixinInit($currentClass, findProperties($name));
}

@mixin propertiesStatus(
  $list,
  $name,
  $default: null,
  $important: false
) {
  @if (meta.type-of($list) == list) {
    @each $index in $list {
      @include linkTo(
                      $index,
                      #{'??sys.'}#{$name}#{'.'}#{$index},
                      getPropertiesDefault($index, $default),
                      $important
      );
    }
  }
}

@mixin modClass($name) {
  @if (meta.type-of($name) == list) {
    @each $key in $name {
      &--#{$key} {
        @content;
      }
    }
  } @else {
    &--#{$name} {
      @content;
    }
  }
}

@mixin modClassByGlobal($name) {
  &#{'.'}#{$currentDesign}#{'-'}#{$currentComponent} {
    @include modClass($name) {
      @content;
    }
  }
}

@mixin subClass($name) {
  @if (meta.type-of($name) == list) {
    @each $key in $name {
      &__#{$key} {
        @content;
      }
    }
  } @else {
    &__#{$name} {
      @content;
    }
  }
}

@mixin subClassByGlobal($name) {
  & #{'.'}#{$currentDesign}#{'-'}#{$currentComponent} {
    @include subClass($name) {
      @content;
    }
  }
}
